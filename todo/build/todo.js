// Generated by CoffeeScript 1.6.3
(function() {
  var Pubsub, Todo, TodoApp, TodoItemView, Todos,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Pubsub = (function() {
    function Pubsub() {}

    return Pubsub;

  })();

  Pubsub = $({});

  Pubsub.publish = Pubsub.trigger;

  Todo = (function() {
    function Todo(title, done) {
      this.title = title;
      this.done = done != null ? done : false;
      this.toggle = __bind(this.toggle, this);
      this.events = $({});
    }

    Todo.prototype.toJSON = function() {
      return {
        title: this.title,
        done: this.done
      };
    };

    Todo.prototype.toggle = function() {
      this.done = !this.done;
      return this.events.trigger("done");
    };

    Todo.prototype.on = function(evt, callback) {
      return this.events.on(evt, callback);
    };

    return Todo;

  })();

  Todo.create = function(_arg) {
    var done, title;
    title = _arg.title, done = _arg.done;
    return new Todo(title, done);
  };

  Todos = (function() {
    function Todos() {
      this.save = __bind(this.save, this);
      this.store = new Storage("todo");
      this.refresh();
    }

    Todos.prototype.save = function() {
      this.store.save(this.toRaw());
      return this;
    };

    Todos.prototype.remaining = function() {
      return $.grep(this.store.all(), function(item) {
        return !item.done;
      });
    };

    Todos.prototype.done = function() {
      return $.grep(this.store.all(), function(item) {
        return item.done;
      });
    };

    Todos.prototype.create = function(todo_text) {
      return this.add(new Todo(todo_text));
    };

    Todos.prototype.add = function(todo) {
      this.items.push(todo);
      this.save;
      return Pubsub.publish("add", todo);
    };

    Todos.prototype.refresh = function() {
      var item, raw_items, _i, _len;
      raw_items = this.store.all();
      for (_i = 0, _len = raw_items.length; _i < _len; _i++) {
        item = raw_items[_i];
        this.items = this.createAndBind(item);
      }
      if (!$.isArray(this.items)) {
        this.items = [this.items];
      }
      this.length = this.items.length;
      return Pubsub.publish("all");
    };

    Todos.prototype.createAndBind = function(todo) {
      todo = Todo.create(todo);
      todo.on("done", this.save);
      return todo;
    };

    Todos.prototype.toRaw = function() {
      var attrs, item, _i, _len, _ref;
      attrs = [];
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        attrs.push(item.toJSON());
      }
      return attrs;
    };

    return Todos;

  })();

  TodoApp = (function() {
    function TodoApp(el) {
      this.createOnEnter = __bind(this.createOnEnter, this);
      this.addOne = __bind(this.addOne, this);
      this.render = __bind(this.render, this);
      this.collection = new Todos();
      this.el = $(el);
      this.input = this.el.find("#new-todo");
      this.allCheckbox = this.el.find("#toggle-all")[0];
      this.main = this.el.find('#main');
      Pubsub.on("all", this.render);
      Pubsub.on("add", this.addOne);
      this.input.on("keypress", this.createOnEnter);
      this.collection.refresh();
    }

    TodoApp.prototype.render = function() {
      var done, remaining;
      this.addAll();
      done = this.collection.done().length;
      remaining = this.collection.remaining().length;
      if (this.collection.length) {
        return this.main.show();
      } else {
        return this.main.hide();
      }
    };

    TodoApp.prototype.addAll = function() {
      var item, _i, _len, _ref, _results;
      _ref = this.collection.items;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(this.addOne(null, item));
      }
      return _results;
    };

    TodoApp.prototype.addOne = function(evt, todo) {
      var view;
      view = new TodoItemView(todo);
      return this.el.find("#todo-list").append(view.render());
    };

    TodoApp.prototype.createOnEnter = function(evt) {
      if (evt.keyCode !== 13) {
        return;
      }
      if (!this.input.val()) {
        return;
      }
      this.collection.create(this.input.val());
      return this.input.val('');
    };

    return TodoApp;

  })();

  TodoItemView = (function(_super) {
    __extends(TodoItemView, _super);

    TodoItemView.prototype.templateName = "item-template";

    function TodoItemView(model) {
      this.model = model;
      this.toggle = __bind(this.toggle, this);
      this.render = __bind(this.render, this);
      TodoItemView.__super__.constructor.call(this, this.model);
      this.model.on("done", this.render);
    }

    TodoItemView.prototype.render = function() {
      this.el = $(TodoItemView.__super__.render.apply(this, arguments));
      this.el.toggleClass("done", this.model.done);
      this.input = this.el.find('.edit');
      this.el.find(".toggle").on("click", this.toggle);
      return this.el;
    };

    TodoItemView.prototype.toggle = function() {
      return this.model.toggle();
    };

    return TodoItemView;

  })(Mustachio);

  $(function() {
    return window.app = new TodoApp("#todoapp");
  });

}).call(this);

/*
//@ sourceMappingURL=todo.map
*/
